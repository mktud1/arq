import os
import json
import logging
from datetime import datetime, timezone
from typing import Dict, List, Optional, Any
import google.generativeai as genai
import time
import re

logger = logging.getLogger(__name__)

class GeminiClient:
    """Cliente aprimorado para Google Gemini Pro 1.5 com an√°lise ultra-detalhada"""
    
    def __init__(self):
        self.api_key = os.getenv('GEMINI_API_KEY')
        if not self.api_key:
            raise ValueError("GEMINI_API_KEY n√£o configurada")
        
        # Configurar Gemini
        genai.configure(api_key=self.api_key)
        
        # Configura√ß√µes otimizadas do modelo
        self.generation_config = {
            "temperature": 0.7,
            "top_p": 0.8,
            "top_k": 40,
            "max_output_tokens": 8192,
        }
        
        self.safety_settings = [
            {
                "category": "HARM_CATEGORY_HARASSMENT",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
                "category": "HARM_CATEGORY_HATE_SPEECH",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
                "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
                "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE"
            }
        ]
        
        # Inicializar modelo
        try:
            self.model = genai.GenerativeModel(
                model_name="gemini-1.5-pro",
                generation_config=self.generation_config,
                safety_settings=self.safety_settings
            )
            logger.info("‚úÖ Cliente Gemini Pro 1.5 inicializado com sucesso")
        except Exception as e:
            logger.error(f"‚ùå Erro ao inicializar Gemini: {e}")
            raise
    
    def generate_ultra_detailed_analysis(self, 
                                       form_data: Dict,
                                       search_context: Optional[str] = None,
                                       websailor_context: Optional[str] = None,
                                       attachments_context: Optional[str] = None) -> Dict:
        """
        Gera an√°lise ultra-detalhada usando todos os contextos dispon√≠veis
        """
        try:
            logger.info("ü§ñ Iniciando an√°lise ultra-detalhada com Gemini Pro 1.5")
            
            # Construir prompt ultra-detalhado
            prompt = self._build_ultra_detailed_prompt(
                form_data, search_context, websailor_context, attachments_context
            )
            
            # Gerar resposta com retry
            response = self._generate_with_retry(prompt)
            
            # Processar resposta
            analysis = self._process_gemini_response(response)
            
            # Adicionar metadados
            analysis['metadata'] = {
                'generated_at': datetime.now(timezone.utc).isoformat(),
                'model': 'gemini-1.5-pro',
                'search_context_used': bool(search_context),
                'websailor_used': bool(websailor_context),
                'attachments_used': bool(attachments_context),
                'form_data_fields': list(form_data.keys()),
                'analysis_version': '2.0.0'
            }
            
            logger.info("‚úÖ An√°lise ultra-detalhada gerada com sucesso")
            return analysis
            
        except Exception as e:
            logger.error(f"‚ùå Erro na an√°lise Gemini: {e}")
            return self._generate_fallback_analysis(form_data)
    
    def _build_ultra_detailed_prompt(self, 
                                   form_data: Dict,
                                   search_context: Optional[str],
                                   websailor_context: Optional[str],
                                   attachments_context: Optional[str]) -> str:
        """Constr√≥i prompt ultra-detalhado para an√°lise"""
        
        prompt = f"""
# AN√ÅLISE ULTRA-DETALHADA DE MERCADO - ARQV30 ENHANCED v2.0

Voc√™ √© um especialista s√™nior em an√°lise de mercado e estrat√©gia de neg√≥cios com 20+ anos de experi√™ncia. 
Sua miss√£o √© gerar uma an√°lise ULTRA-DETALHADA, PRECISA e ACION√ÅVEL baseada nos dados fornecidos.

## DADOS DO PROJETO:
- **Segmento**: {form_data.get('segmento', 'N√£o informado')}
- **Produto/Servi√ßo**: {form_data.get('produto', 'N√£o informado')}
- **P√∫blico-Alvo**: {form_data.get('publico', 'N√£o informado')}
- **Pre√ßo**: R$ {form_data.get('preco', 'N√£o informado')}
- **Concorrentes**: {form_data.get('concorrentes', 'N√£o informado')}
- **Objetivo de Receita**: R$ {form_data.get('objetivoReceita', 'N√£o informado')}
- **Or√ßamento Marketing**: R$ {form_data.get('orcamentoMarketing', 'N√£o informado')}
- **Prazo de Lan√ßamento**: {form_data.get('prazoLancamento', 'N√£o informado')}
- **Dados Adicionais**: {form_data.get('dadosAdicionais', 'N√£o informado')}
"""

        # Adicionar contextos se dispon√≠veis
        if search_context:
            prompt += f"""
## CONTEXTO DE PESQUISA PROFUNDA:
{search_context}
"""

        if websailor_context:
            prompt += f"""
## CONTEXTO WEBSAILOR (NAVEGA√á√ÉO WEB AVAN√áADA):
{websailor_context}
"""

        if attachments_context:
            prompt += f"""
## CONTEXTO DOS ANEXOS:
{attachments_context}
"""

        prompt += """
## INSTRU√á√ïES PARA AN√ÅLISE ULTRA-DETALHADA:

Gere uma an√°lise COMPLETA, PRECISA e ACION√ÅVEL seguindo EXATAMENTE esta estrutura JSON.
IMPORTANTE: Responda APENAS com o JSON v√°lido, sem texto adicional.

```json
{
  "avatar_ultra_detalhado": {
    "perfil_demografico": {
      "idade": "Faixa et√°ria espec√≠fica com justificativa baseada no segmento",
      "genero": "Distribui√ß√£o por g√™nero com percentuais realistas",
      "renda": "Faixa de renda detalhada com valores espec√≠ficos em R$",
      "escolaridade": "N√≠vel educacional predominante com justificativa",
      "localizacao": "Localiza√ß√£o geogr√°fica espec√≠fica (cidades/regi√µes)",
      "profissao": "Profiss√µes principais e secund√°rias detalhadas"
    },
    "perfil_psicografico": {
      "personalidade": "Tra√ßos de personalidade dominantes espec√≠ficos",
      "valores": "Valores fundamentais que guiam decis√µes de compra",
      "interesses": "Interesses e hobbies espec√≠ficos do p√∫blico",
      "estilo_vida": "Estilo de vida detalhado e comportamentos",
      "comportamento_compra": "Padr√µes espec√≠ficos de comportamento de compra"
    },
    "dores_especificas": [
      "Dor espec√≠fica 1 com intensidade e frequ√™ncia detalhadas",
      "Dor espec√≠fica 2 com impacto emocional e financeiro",
      "Dor espec√≠fica 3 com consequ√™ncias pr√°ticas no dia a dia"
    ],
    "desejos_profundos": [
      "Desejo profundo 1 com motiva√ß√£o emocional espec√≠fica",
      "Desejo profundo 2 com benef√≠cio esperado detalhado",
      "Desejo profundo 3 com transforma√ß√£o desejada espec√≠fica"
    ],
    "gatilhos_mentais": [
      "Gatilho mental 1 com aplica√ß√£o pr√°tica e exemplo de uso",
      "Gatilho mental 2 com timing ideal e contexto de aplica√ß√£o",
      "Gatilho mental 3 com estrat√©gia de implementa√ß√£o espec√≠fica"
    ],
    "jornada_do_cliente": {
      "consciencia": "Como toma consci√™ncia do problema - canais e momentos",
      "consideracao": "Como avalia solu√ß√µes - crit√©rios e processo decis√≥rio",
      "decisao": "Fatores que influenciam decis√£o final - pre√ßo, confian√ßa, urg√™ncia",
      "pos_compra": "Comportamento ap√≥s compra - uso, satisfa√ß√£o, recomenda√ß√£o"
    }
  },
  
  "escopo": {
    "posicionamento_mercado": "Posicionamento √∫nico e diferenciado no mercado brasileiro",
    "proposta_valor": "Proposta de valor clara, espec√≠fica e diferenciada",
    "vantagem_competitiva": "Principais vantagens sobre concorrentes espec√≠ficos",
    "nicho_especifico": "Nicho espec√≠fico de atua√ß√£o com caracter√≠sticas √∫nicas",
    "tamanho_mercado": {
      "tam_total": "Tamanho total do mercado em R$ com fonte/justificativa",
      "sam_disponivel": "Mercado dispon√≠vel em R$ considerando segmenta√ß√£o",
      "som_obtivel": "Mercado obt√≠vel em R$ considerando recursos e capacidade"
    }
  },
  
  "analise_concorrencia_detalhada": {
    "concorrentes_diretos": [
      {
        "nome": "Nome do concorrente direto real",
        "preco_range": "Faixa de pre√ßos espec√≠fica em R$",
        "posicionamento": "Como se posiciona no mercado",
        "pontos_fortes": "Principais for√ßas competitivas",
        "pontos_fracos": "Principais fraquezas identificadas",
        "market_share": "Participa√ß√£o estimada no mercado"
      }
    ],
    "concorrentes_indiretos": [
      {
        "nome": "Nome do concorrente indireto",
        "como_compete": "Como compete indiretamente pelo mesmo p√∫blico",
        "nivel_ameaca": "Alto/M√©dio/Baixo com justificativa"
      }
    ],
    "gaps_mercado": [
      "Gap 1 com oportunidade espec√≠fica e potencial de receita",
      "Gap 2 com estrat√©gia de explora√ß√£o detalhada",
      "Gap 3 com vantagem competitiva sustent√°vel"
    ],
    "analise_precos": {
      "faixa_mercado": "Faixa de pre√ßos do mercado (m√≠n-m√°x em R$)",
      "posicionamento_preco": "Onde seu pre√ßo se posiciona (premium/m√©dio/baixo)",
      "estrategia_recomendada": "Estrat√©gia de precifica√ß√£o espec√≠fica"
    }
  },
  
  "estrategia_palavras_chave": {
    "palavras_chave_primarias": [
      {
        "termo": "palavra-chave principal espec√≠fica",
        "volume_mensal": "Volume de busca mensal estimado",
        "dificuldade": "N√≠vel de dificuldade (Alta/M√©dia/Baixa)",
        "cpc_estimado": "CPC estimado em R$ para Google Ads",
        "intencao": "Inten√ß√£o de busca (informacional/comercial/transacional)"
      }
    ],
    "palavras_chave_secundarias": [
      {
        "termo": "palavra-chave secund√°ria espec√≠fica",
        "volume_mensal": "Volume de busca mensal",
        "oportunidade": "N√≠vel de oportunidade (Alta/M√©dia/Baixa)",
        "uso_recomendado": "Como usar (blog/landing page/ads)"
      }
    ],
    "long_tail": [
      "Frase longa espec√≠fica 1 com alta inten√ß√£o de compra",
      "Frase longa espec√≠fica 2 com baixa concorr√™ncia"
    ],
    "estrategia_conteudo": "Estrat√©gia de conte√∫do baseada nas palavras-chave",
    "canais_marketing": {
      "google_ads": {
        "estrategia": "Estrat√©gia espec√≠fica para Google Ads",
        "orcamento_sugerido": "Or√ßamento mensal sugerido em R$",
        "cpc_medio": "CPC m√©dio esperado em R$",
        "roi_esperado": "ROI esperado em %"
      },
      "facebook_ads": {
        "estrategia": "Estrat√©gia para Facebook/Instagram Ads",
        "publico_alvo": "Defini√ß√£o espec√≠fica de p√∫blico-alvo",
        "orcamento_sugerido": "Or√ßamento mensal sugerido em R$",
        "cpm_estimado": "CPM estimado em R$"
      },
      "seo": {
        "estrategia": "Estrat√©gia de SEO espec√≠fica",
        "tempo_resultados": "Tempo para ver resultados (meses)",
        "acoes_prioritarias": "A√ß√µes priorit√°rias de SEO"
      },
      "content_marketing": {
        "tipos_conteudo": "Tipos de conte√∫do recomendados",
        "frequencia": "Frequ√™ncia de publica√ß√£o",
        "canais_distribuicao": "Canais de distribui√ß√£o priorit√°rios"
      }
    }
  },
  
  "metricas_performance_detalhadas": {
    "kpis_principais": {
      "cac": "Custo de Aquisi√ß√£o de Cliente estimado em R$",
      "ltv": "Lifetime Value estimado em R$",
      "roi": "ROI esperado em %",
      "taxa_conversao": "Taxa de convers√£o esperada em %",
      "ticket_medio": "Ticket m√©dio em R$",
      "payback": "Tempo de payback em meses"
    },
    "projecoes_vendas": {
      "mes_1": "Vendas projetadas m√™s 1 (unidades e R$)",
      "mes_3": "Vendas projetadas m√™s 3 (unidades e R$)",
      "mes_6": "Vendas projetadas m√™s 6 (unidades e R$)",
      "mes_12": "Vendas projetadas m√™s 12 (unidades e R$)"
    },
    "metricas_marketing": {
      "cpm": "CPM estimado em R$",
      "cpc": "CPC estimado em R$",
      "ctr": "CTR esperado em %",
      "roas": "ROAS esperado",
      "taxa_abertura_email": "Taxa de abertura de email em %"
    },
    "benchmarks_segmento": {
      "taxa_conversao_media": "Taxa de convers√£o m√©dia do segmento",
      "cac_medio": "CAC m√©dio do segmento em R$",
      "ltv_medio": "LTV m√©dio do segmento em R$",
      "margem_lucro_media": "Margem de lucro m√©dia do segmento"
    }
  },
  
  "projecoes_cenarios": {
    "cenario_conservador": {
      "vendas_mensais": "N√∫mero de vendas mensais (unidades)",
      "receita_mensal": "Receita mensal em R$",
      "receita_anual": "Receita anual em R$",
      "margem_lucro": "Margem de lucro em %",
      "investimento_marketing": "Investimento em marketing em R$",
      "premissas": [
        "Premissa conservadora 1 espec√≠fica",
        "Premissa conservadora 2 espec√≠fica"
      ]
    },
    "cenario_realista": {
      "vendas_mensais": "N√∫mero de vendas mensais (unidades)",
      "receita_mensal": "Receita mensal em R$",
      "receita_anual": "Receita anual em R$",
      "margem_lucro": "Margem de lucro em %",
      "investimento_marketing": "Investimento em marketing em R$",
      "premissas": [
        "Premissa realista 1 espec√≠fica",
        "Premissa realista 2 espec√≠fica"
      ]
    },
    "cenario_otimista": {
      "vendas_mensais": "N√∫mero de vendas mensais (unidades)",
      "receita_mensal": "Receita mensal em R$",
      "receita_anual": "Receita anual em R$",
      "margem_lucro": "Margem de lucro em %",
      "investimento_marketing": "Investimento em marketing em R$",
      "premissas": [
        "Premissa otimista 1 espec√≠fica",
        "Premissa otimista 2 espec√≠fica"
      ]
    }
  },
  
  "inteligencia_mercado": {
    "tendencias_mercado": [
      {
        "tendencia": "Nome da tend√™ncia espec√≠fica",
        "impacto": "Alto/M√©dio/Baixo",
        "oportunidade": "Como aproveitar esta tend√™ncia",
        "timeline": "Quando implementar (prazo)"
      }
    ],
    "sazonalidade": {
      "picos_demanda": "Per√≠odos de maior demanda com datas espec√≠ficas",
      "baixas_demanda": "Per√≠odos de menor demanda com datas espec√≠ficas",
      "estrategia_sazonal": "Como lidar com sazonalidade",
      "preparacao_picos": "Como se preparar para picos de demanda"
    },
    "tecnologias_emergentes": [
      "Tecnologia 1 e seu impacto no segmento",
      "Tecnologia 2 e oportunidades de implementa√ß√£o"
    ],
    "mudancas_comportamento": [
      "Mudan√ßa 1 no comportamento do consumidor brasileiro",
      "Mudan√ßa 2 e suas implica√ß√µes para o neg√≥cio"
    ],
    "regulamentacoes": "Regulamenta√ß√µes relevantes e impactos no neg√≥cio"
  },
  
  "plano_acao_detalhado": {
    "fase_pre_lancamento": {
      "duracao": "8 semanas",
      "acoes": [
        {
          "acao": "A√ß√£o espec√≠fica de pr√©-lan√ßamento",
          "responsavel": "Quem deve executar",
          "prazo": "Prazo em semanas",
          "recursos_necessarios": "Recursos necess√°rios (humanos/financeiros)",
          "resultado_esperado": "Resultado esperado espec√≠fico",
          "metricas_sucesso": "Como medir o sucesso"
        }
      ]
    },
    "fase_lancamento": {
      "duracao": "4 semanas",
      "acoes": [
        {
          "acao": "A√ß√£o espec√≠fica de lan√ßamento",
          "responsavel": "Quem deve executar",
          "prazo": "Prazo espec√≠fico",
          "orcamento": "Or√ßamento necess√°rio em R$",
          "metricas_sucesso": "Como medir sucesso do lan√ßamento"
        }
      ]
    },
    "fase_pos_lancamento": {
      "duracao": "12 semanas",
      "acoes": [
        {
          "acao": "A√ß√£o espec√≠fica p√≥s-lan√ßamento",
          "responsavel": "Quem deve executar",
          "frequencia": "Frequ√™ncia de execu√ß√£o",
          "objetivo": "Objetivo espec√≠fico",
          "kpis": "KPIs para acompanhar"
        }
      ]
    }
  },
  
  "insights_exclusivos": [
    "Insight exclusivo 1: Descoberta √∫nica baseada na an√°lise completa dos dados que outros n√£o veriam facilmente",
    "Insight exclusivo 2: Oportunidade n√£o √≥bvia identificada atrav√©s da combina√ß√£o de dados e contextos",
    "Insight exclusivo 3: Estrat√©gia diferenciada baseada em padr√µes identificados na an√°lise",
    "Insight exclusivo 4: Timing ideal de mercado identificado atrav√©s de tend√™ncias e sazonalidade",
    "Insight exclusivo 5: Vantagem competitiva sustent√°vel baseada em gaps de mercado identificados"
  ]
}
```

## DIRETRIZES CR√çTICAS:

1. **SEJA ULTRA-ESPEC√çFICO**: Use n√∫meros reais, percentuais espec√≠ficos, valores em R$ sempre que poss√≠vel.

2. **USE TODOS OS CONTEXTOS**: Incorpore TODAS as informa√ß√µes dos contextos de pesquisa, WebSailor e anexos fornecidos.

3. **SEJA ACION√ÅVEL**: Cada recomenda√ß√£o deve ser implement√°vel imediatamente com passos claros.

4. **DADOS BRASILEIROS**: Foque no mercado brasileiro com dados locais, moeda em reais, comportamento do consumidor brasileiro.

5. **INSIGHTS √öNICOS**: Gere insights que s√≥ um especialista experiente com acesso a todos esses dados identificaria.

6. **FORMATO JSON V√ÅLIDO**: Responda APENAS com o JSON v√°lido, sem texto adicional antes ou depois.

7. **PRECIS√ÉO**: Baseie-se nos dados fornecidos e contextos para gerar an√°lises precisas e realistas.

GERE A AN√ÅLISE ULTRA-DETALHADA AGORA:
"""
        
        return prompt
    
    def _generate_with_retry(self, prompt: str, max_retries: int = 3) -> str:
        """Gera resposta com retry em caso de erro"""
        
        for attempt in range(max_retries):
            try:
                logger.info(f"üîÑ Tentativa {attempt + 1} de gera√ß√£o com Gemini Pro")
                
                response = self.model.generate_content(prompt)
                
                if response.text:
                    logger.info("‚úÖ Resposta gerada com sucesso")
                    return response.text
                else:
                    raise Exception("Resposta vazia do Gemini")
                    
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Tentativa {attempt + 1} falhou: {e}")
                
                if attempt < max_retries - 1:
                    wait_time = 2 ** attempt  # Backoff exponencial
                    logger.info(f"‚è≥ Aguardando {wait_time}s antes da pr√≥xima tentativa...")
                    time.sleep(wait_time)
                else:
                    logger.error(f"‚ùå Todas as tentativas falharam")
                    raise e
    
    def _process_gemini_response(self, response_text: str) -> Dict:
        """Processa resposta do Gemini e extrai JSON"""
        
        try:
            # Limpar resposta
            response_text = response_text.strip()
            
            # Remover markdown se presente
            if response_text.startswith('```json'):
                response_text = response_text[7:]
            if response_text.startswith('```'):
                response_text = response_text[3:]
            if response_text.endswith('```'):
                response_text = response_text[:-3]
            
            # Tentar parsear JSON
            analysis = json.loads(response_text)
            
            # Validar estrutura b√°sica
            required_keys = [
                'avatar_ultra_detalhado', 'escopo', 'analise_concorrencia_detalhada',
                'estrategia_palavras_chave', 'metricas_performance_detalhadas',
                'projecoes_cenarios', 'inteligencia_mercado', 'plano_acao_detalhado',
                'insights_exclusivos'
            ]
            
            missing_keys = [key for key in required_keys if key not in analysis]
            if missing_keys:
                logger.warning(f"‚ö†Ô∏è Chaves ausentes na resposta: {missing_keys}")
            
            logger.info("‚úÖ JSON processado com sucesso")
            return analysis
            
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå Erro ao parsear JSON: {e}")
            logger.error(f"Resposta recebida (primeiros 500 chars): {response_text[:500]}...")
            
            # Tentar extrair informa√ß√µes mesmo com JSON inv√°lido
            return self._extract_fallback_analysis(response_text)
    
    def _extract_fallback_analysis(self, response_text: str) -> Dict:
        """Extrai an√°lise mesmo com JSON inv√°lido"""
        
        logger.warning("üîß Usando an√°lise de fallback devido a JSON inv√°lido")
        
        return {
            "avatar_ultra_detalhado": {
                "perfil_demografico": {
                    "resumo": "An√°lise baseada nos dados fornecidos - JSON inv√°lido detectado"
                },
                "dores_especificas": ["An√°lise detalhada em processamento"],
                "desejos_profundos": ["Insights sendo refinados"],
                "gatilhos_mentais": ["Estrat√©gias em desenvolvimento"]
            },
            "escopo": {
                "posicionamento_mercado": "Posicionamento estrat√©gico em an√°lise",
                "proposta_valor": "Proposta de valor sendo definida"
            },
            "analise_concorrencia_detalhada": {
                "concorrentes_diretos": [
                    {
                        "nome": "An√°lise em andamento",
                        "observacao": "Dados sendo processados"
                    }
                ],
                "gaps_mercado": ["Oportunidades sendo identificadas"]
            },
            "estrategia_palavras_chave": {
                "palavras_chave_primarias": [
                    {
                        "termo": "estrat√©gia",
                        "volume_mensal": "Em an√°lise",
                        "dificuldade": "M√©dia"
                    }
                ],
                "canais_marketing": {
                    "estrategia_geral": "Estrat√©gia multi-canal em desenvolvimento"
                }
            },
            "metricas_performance_detalhadas": {
                "kpis_principais": {
                    "resumo": "M√©tricas sendo calculadas com base nos dados fornecidos"
                }
            },
            "projecoes_cenarios": {
                "resumo": "Proje√ß√µes sendo elaboradas com base na an√°lise"
            },
            "inteligencia_mercado": {
                "tendencias_mercado": [
                    {
                        "tendencia": "Tend√™ncias sendo analisadas",
                        "impacto": "Em avalia√ß√£o"
                    }
                ],
                "oportunidades": ["Oportunidades sendo mapeadas"]
            },
            "plano_acao_detalhado": {
                "resumo": "Plano de a√ß√£o detalhado em elabora√ß√£o"
            },
            "insights_exclusivos": [
                "An√°lise ultra-detalhada processada com dados fornecidos",
                "Estrat√©gias personalizadas baseadas no contexto espec√≠fico",
                "Recomenda√ß√µes acion√°veis para implementa√ß√£o imediata",
                "Insights √∫nicos identificados atrav√©s da an√°lise avan√ßada",
                "Oportunidades de mercado mapeadas com precis√£o"
            ],
            "raw_response": response_text[:1000] + "..." if len(response_text) > 1000 else response_text,
            "status": "fallback_analysis",
            "error_note": "JSON inv√°lido detectado - an√°lise de fallback aplicada"
        }
    
    def _generate_fallback_analysis(self, form_data: Dict) -> Dict:
        """Gera an√°lise de fallback em caso de erro total"""
        
        logger.warning("üîß Gerando an√°lise de fallback completa")
        
        segmento = form_data.get('segmento', 'Produto Digital')
        preco = form_data.get('preco', 997)
        
        try:
            preco_float = float(str(preco).replace(',', '.')) if preco else 997.0
        except:
            preco_float = 997.0
        
        return {
            "avatar_ultra_detalhado": {
                "perfil_demografico": {
                    "idade": "30-45 anos",
                    "genero": "60% mulheres, 40% homens",
                    "renda": "R$ 5.000 - R$ 15.000",
                    "escolaridade": "Superior completo",
                    "localizacao": "Grandes centros urbanos brasileiros",
                    "profissao": f"Profissionais de {segmento}"
                },
                "perfil_psicografico": {
                    "personalidade": "Ambiciosos e orientados a resultados",
                    "valores": "Crescimento pessoal e profissional",
                    "interesses": f"Tend√™ncias em {segmento}",
                    "estilo_vida": "Din√¢mico e conectado digitalmente",
                    "comportamento_compra": "Pesquisa antes de comprar, valoriza qualidade"
                },
                "dores_especificas": [
                    f"Necessidade de solu√ß√£o espec√≠fica para {segmento}",
                    "Busca por alternativas eficazes no mercado",
                    "Desafios espec√≠ficos do p√∫blico-alvo"
                ],
                "desejos_profundos": [
                    "Solu√ß√£o eficaz para suas necessidades",
                    "Valor agregado ao investimento",
                    "Resultados mensur√°veis e r√°pidos"
                ],
                "gatilhos_mentais": [
                    "Urg√™ncia: Oportunidade limitada",
                    "Autoridade: Especialista reconhecido",
                    "Prova social: Cases de sucesso"
                ]
            },
            "escopo": {
                "posicionamento_mercado": f"L√≠der em solu√ß√µes para {segmento}",
                "proposta_valor": f"A melhor solu√ß√£o para {segmento} no Brasil",
                "nicho_especifico": segmento,
                "tamanho_mercado": {
                    "tam_total": "R$ 2,5 bilh√µes",
                    "sam_disponivel": "R$ 375 milh√µes",
                    "som_obtivel": "R$ 25 milh√µes"
                }
            },
            "analise_concorrencia_detalhada": {
                "concorrentes_diretos": [
                    {
                        "nome": "Concorrente Principal",
                        "preco_range": f"R$ {preco_float * 0.8:.0f} - R$ {preco_float * 1.2:.0f}",
                        "posicionamento": "Posicionamento similar no mercado",
                        "pontos_fortes": "Marca estabelecida",
                        "pontos_fracos": "Pre√ßo elevado"
                    }
                ],
                "gaps_mercado": [
                    "Oportunidade de diferencia√ß√£o por pre√ßo",
                    "Atendimento personalizado",
                    "Inova√ß√£o tecnol√≥gica"
                ]
            },
            "estrategia_palavras_chave": {
                "palavras_chave_primarias": [
                    {
                        "termo": segmento.lower(),
                        "volume_mensal": "10.000+",
                        "dificuldade": "M√©dia",
                        "cpc_estimado": "R$ 2,50"
                    }
                ],
                "canais_marketing": {
                    "google_ads": {
                        "estrategia": "Campanhas segmentadas por palavra-chave",
                        "orcamento_sugerido": f"R$ {preco_float * 10:.0f}",
                        "cpc_medio": "R$ 2,50"
                    }
                }
            },
            "metricas_performance_detalhadas": {
                "kpis_principais": {
                    "cac": f"R$ {preco_float * 0.3:.0f}",
                    "ltv": f"R$ {preco_float * 3:.0f}",
                    "roi": "300%",
                    "taxa_conversao": "2-5%",
                    "ticket_medio": f"R$ {preco_float:.0f}"
                },
                "benchmarks_segmento": {
                    "taxa_conversao_media": "3%",
                    "cac_medio": f"R$ {preco_float * 0.25:.0f}",
                    "ltv_medio": f"R$ {preco_float * 2.5:.0f}"
                }
            },
            "projecoes_cenarios": {
                "cenario_conservador": {
                    "vendas_mensais": "25 vendas",
                    "receita_mensal": f"R$ {preco_float * 25:.0f}",
                    "receita_anual": f"R$ {preco_float * 300:.0f}",
                    "margem_lucro": "60%"
                },
                "cenario_realista": {
                    "vendas_mensais": "50 vendas",
                    "receita_mensal": f"R$ {preco_float * 50:.0f}",
                    "receita_anual": f"R$ {preco_float * 600:.0f}",
                    "margem_lucro": "70%"
                },
                "cenario_otimista": {
                    "vendas_mensais": "100 vendas",
                    "receita_mensal": f"R$ {preco_float * 100:.0f}",
                    "receita_anual": f"R$ {preco_float * 1200:.0f}",
                    "margem_lucro": "80%"
                }
            },
            "inteligencia_mercado": {
                "tendencias_mercado": [
                    {
                        "tendencia": f"Crescimento do mercado de {segmento}",
                        "impacto": "Alto",
                        "oportunidade": "Aproveitar expans√£o do mercado"
                    }
                ],
                "sazonalidade": {
                    "picos_demanda": "Janeiro, Julho, Novembro",
                    "baixas_demanda": "Dezembro, Junho",
                    "estrategia_sazonal": "Campanhas intensificadas nos picos"
                }
            },
            "plano_acao_detalhado": {
                "fase_pre_lancamento": {
                    "duracao": "8 semanas",
                    "acoes": [
                        {
                            "acao": "Definir estrat√©gia de marketing",
                            "responsavel": "Equipe de Marketing",
                            "prazo": "2 semanas",
                            "recursos_necessarios": "R$ 5.000"
                        }
                    ]
                },
                "fase_lancamento": {
                    "duracao": "4 semanas",
                    "acoes": [
                        {
                            "acao": "Executar campanha de lan√ßamento",
                            "responsavel": "Equipe de Marketing",
                            "prazo": "4 semanas",
                            "orcamento": f"R$ {preco_float * 20:.0f}"
                        }
                    ]
                }
            },
            "insights_exclusivos": [
                f"An√°lise personalizada para o segmento {segmento}",
                "Estrat√©gia adaptada ao mercado brasileiro",
                "Recomenda√ß√µes pr√°ticas para implementa√ß√£o imediata",
                "Oportunidades de diferencia√ß√£o identificadas",
                "Timing ideal para entrada no mercado"
            ],
            "metadata": {
                "generated_at": datetime.now(timezone.utc).isoformat(),
                "model": "fallback",
                "status": "fallback_analysis",
                "reason": "Erro na gera√ß√£o principal - an√°lise de backup aplicada"
            }
        }
    
    def test_connection(self) -> bool:
        """Testa conex√£o com Gemini"""
        try:
            logger.info("üîç Testando conex√£o com Gemini Pro 1.5...")
            response = self.model.generate_content("Teste de conex√£o. Responda apenas: CONEX√ÉO OK")
            result = bool(response.text and "OK" in response.text.upper())
            
            if result:
                logger.info("‚úÖ Conex√£o com Gemini Pro 1.5 funcionando")
            else:
                logger.warning("‚ö†Ô∏è Conex√£o com Gemini Pro 1.5 inst√°vel")
            
            return result
        except Exception as e:
            logger.error(f"‚ùå Erro no teste de conex√£o Gemini: {e}")
            return False